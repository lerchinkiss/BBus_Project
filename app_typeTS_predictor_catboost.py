import streamlit as st
st.set_page_config(page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¢–°", layout="centered")

import os
import pandas as pd
from catboost import CatBoostClassifier, Pool

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
model_path = "catboost_typeTS_model.cbm"
model = CatBoostClassifier()
model.load_model(model_path)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
@st.cache_data
def get_options():
    def load_desc(file_name):
        for folder in ["filtered_datasets", "datasets"]:
            path = os.path.join(folder, file_name)
            if os.path.exists(path):
                df = pd.read_excel(path)
                return sorted(df['Description'].dropna().unique())
        raise FileNotFoundError(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ 'filtered_datasets/', –Ω–∏ –≤ 'datasets/'")

    # –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    for folder in ["filtered_datasets", "datasets"]:
        orders_path = os.path.join(folder, "bbOrders_filtered.xlsx")
        if os.path.exists(orders_path):
            orders = pd.read_excel(orders_path)
            break
    else:
        raise FileNotFoundError("–§–∞–π–ª 'bbOrders_filtered.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    orders['–ú–∞—Ä—à—Ä—É—Ç'] = orders['–ó–∞–≥—Ä—É–∑–∫–∞–ü—É–Ω–∫—Ç'].astype(str) + ' ‚Üí ' + orders['–†–∞–∑–≥—Ä—É–∑–∫–∞–ê–¥—Ä–µ—Å'].astype(str)

    return {
        '–ó–∞–∫–∞–∑—á–∏–∫': load_desc("contragents_filtered.xlsx"),
        '–¢–°': load_desc("uatTS_filtered.xlsx"),
        '–í–æ–¥–∏—Ç–µ–ª—å': load_desc("uatWorkers_filtered.xlsx"),
        '–¢–∞—Ä–∏—Ñ': load_desc("bbTariffs_filtered.xlsx"),
        '–¢–∏–ø–ó–∞–∫–∞–∑–∞': load_desc("bbOrderTypes.xlsx"),
        '–ú–∞—Ä—à—Ä—É—Ç': sorted(orders['–ú–∞—Ä—à—Ä—É—Ç'].dropna().unique())
    }


options = get_options()

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.title("üöå –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –¢–∏–ø –¢–°")

with st.form("predict_form"):
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", min_value=1, max_value=100, value=10)
    —Ü–µ–Ω–∞_–∑–∞_—á–∞—Å = st.number_input("–¶–µ–Ω–∞ –∑–∞ —á–∞—Å", min_value=500, max_value=10000, value=2500)
    —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å = st.number_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", min_value=500, max_value=500000, value=30000)

    –∑–∞–∫–∞–∑—á–∏–∫ = st.selectbox("–ó–∞–∫–∞–∑—á–∏–∫", options['–ó–∞–∫–∞–∑—á–∏–∫'])
    —Ç—Å = st.selectbox("–¢–°", options['–¢–°'])
    –≤–æ–¥–∏—Ç–µ–ª—å = st.selectbox("–í–æ–¥–∏—Ç–µ–ª—å", options['–í–æ–¥–∏—Ç–µ–ª—å'])
    —Ç–∞—Ä–∏—Ñ = st.selectbox("–¢–∞—Ä–∏—Ñ", options['–¢–∞—Ä–∏—Ñ'])
    —Ç–∏–ø_–∑–∞–∫–∞–∑–∞ = st.selectbox("–¢–∏–ø –∑–∞–∫–∞–∑–∞", options['–¢–∏–ø–ó–∞–∫–∞–∑–∞'])
    –º–∞—Ä—à—Ä—É—Ç = st.selectbox("–ú–∞—Ä—à—Ä—É—Ç", options['–ú–∞—Ä—à—Ä—É—Ç'])

    submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
if submitted:
    input_data = pd.DataFrame([{
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤,
        '–¶–µ–Ω–∞–ó–∞–ß–∞—Å': —Ü–µ–Ω–∞_–∑–∞_—á–∞—Å,
        '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è–°—Ç–æ–∏–º–æ—Å—Ç—å': —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å,
        '–ó–∞–∫–∞–∑—á–∏–∫': –∑–∞–∫–∞–∑—á–∏–∫,
        '–¢–°': —Ç—Å,
        '–í–æ–¥–∏—Ç–µ–ª—å': –≤–æ–¥–∏—Ç–µ–ª—å,
        '–¢–∞—Ä–∏—Ñ': —Ç–∞—Ä–∏—Ñ,
        '–¢–∏–ø–ó–∞–∫–∞–∑–∞': —Ç–∏–ø_–∑–∞–∫–∞–∑–∞,
        '–ú–∞—Ä—à—Ä—É—Ç': –º–∞—Ä—à—Ä—É—Ç
    }])

    pool = Pool(input_data, cat_features=input_data.select_dtypes('object').columns.tolist())
    prediction = model.predict(pool)[0]

    st.success(f"üöç –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –¢–∏–ø –¢–°: **{prediction}**")
