import streamlit as st
from link_tables import apply_links
from common_imports import *
from testapp_saveorder import save_order_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
    page_icon="üöå",
    layout="centered"
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
@st.cache_resource
def load_model():
    model = CatBoostClassifier()
    model.load_model(os.path.join(MODELS_DIR, "catboost_typets_model_v3.cbm"))
    return model

model = load_model()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    orders_df = pd.read_excel(os.path.join(DATA_DIR, "filtered_datasets", "bbOrders_filtered.xlsx"))
    orders_df = apply_links(orders_df)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    customer_profile = pd.read_excel(os.path.join(PREPARED_DATA_DIR, "customer_profile.xlsx"))
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –¢–°
    type_ts_df = pd.read_excel(os.path.join(DATA_DIR, "filtered_datasets", "uatTypeTS_filtered.xlsx"))
    type_ts_df = type_ts_df.dropna(subset=['Description', '–ú–∞–∫—Å–ú–µ—Å—Ç'])
    type_ts_mapping = dict(zip(type_ts_df['Description'], type_ts_df['–ú–∞–∫—Å–ú–µ—Å—Ç']))
    
    return orders_df, customer_profile, type_ts_mapping

orders_df, customer_profile, type_ts_mapping = load_data()

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.title("üöå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞")

# –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
unique_companies = sorted(orders_df['–ó–∞–∫–∞–∑—á–∏–∫'].dropna().unique())

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("order_form"):
    st.markdown("### üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
    
    col1, col2 = st.columns(2)
    with col1:
        –∑–∞–∫–∞–∑—á–∏–∫ = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞:", unique_companies + ["–ù–æ–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫"])
        if –∑–∞–∫–∞–∑—á–∏–∫ == "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫":
            –∑–∞–∫–∞–∑—á–∏–∫ = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:", key="new_company")
            if not –∑–∞–∫–∞–∑—á–∏–∫:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
                st.stop()
        
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
            min_value=1,
            max_value=59,
            value=10,
            help="–£–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
        )
    
    with col2:
        —Ü–µ–Ω–∞_–∑–∞_—á–∞—Å = st.number_input(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å –∞—Ä–µ–Ω–¥—ã (—Ä—É–±.):",
            min_value=500,
            max_value=10000,
            value=2500,
            help="–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ —á–∞—Å –∞—Ä–µ–Ω–¥—ã"
        )
        
        —Ç–∏–ø_–∑–∞–∫–∞–∑–∞ = st.selectbox(
            "–¢–∏–ø –∑–∞–∫–∞–∑–∞:",
            ["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–°–≤–∞–¥—å–±–∞", "–î–µ—Ç–∏"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞"
        )
    
    submitted = st.form_submit_button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ ===
if –∑–∞–∫–∞–∑—á–∏–∫ and –∑–∞–∫–∞–∑—á–∏–∫ != "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫":
    st.markdown("---")
    st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞")
    profile_row = customer_profile[customer_profile['–ó–∞–∫–∞–∑—á–∏–∫'] == –∑–∞–∫–∞–∑—á–∏–∫]
    
    if not profile_row.empty:
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–õ—é–±–∏–º—ã–π —Ç–∏–ø –¢–°", profile_row['–õ—é–±–∏–º—ã–π–¢–∏–ø–¢–°'].values[0])
            st.metric("–õ—é–±–∏–º–∞—è –º–æ–¥–µ–ª—å –¢–°", profile_row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π–õ—é–±–∏–º—ã–π–¢–°'].values[0])
        with col2:
            st.metric("–õ—é–±–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", profile_row['–õ—é–±–∏–º—ã–π–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞'].values[0])
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", 
                     f"{orders_df[orders_df['–ó–∞–∫–∞–∑—á–∏–∫'] == –∑–∞–∫–∞–∑—á–∏–∫]['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤'].mean():.1f}")
    else:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑—á–∏–∫—É.")

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
if submitted:
    # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞
    profile_row = customer_profile[customer_profile['–ó–∞–∫–∞–∑—á–∏–∫'] == –∑–∞–∫–∞–∑—á–∏–∫]
    
    if not profile_row.empty:
        –ª—é–±–∏–º—ã–π_—Ç–∏–ø_—Ç—Å = profile_row['–õ—é–±–∏–º—ã–π–¢–∏–ø–¢–°'].values[0]
        –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π_–ª—é–±–∏–º—ã–π_—Ç—Å = profile_row['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π–õ—é–±–∏–º—ã–π–¢–°'].values[0]
        –ª—é–±–∏–º—ã–π_—Å—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞ = profile_row['–õ—é–±–∏–º—ã–π–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞'].values[0]
    else:
        –ª—é–±–∏–º—ã–π_—Ç–∏–ø_—Ç—Å = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π_–ª—é–±–∏–º—ã–π_—Ç—Å = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        –ª—é–±–∏–º—ã–π_—Å—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞ = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    input_data = pd.DataFrame([{
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤,
        '–¶–µ–Ω–∞–ó–∞–ß–∞—Å': —Ü–µ–Ω–∞_–∑–∞_—á–∞—Å,
        '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è–°—Ç–æ–∏–º–æ—Å—Ç—å': —Ü–µ–Ω–∞_–∑–∞_—á–∞—Å,
        '–ó–∞–∫–∞–∑—á–∏–∫': –∑–∞–∫–∞–∑—á–∏–∫,
        '–¢–∏–ø–ó–∞–∫–∞–∑–∞': —Ç–∏–ø_–∑–∞–∫–∞–∑–∞,
        '–õ—é–±–∏–º—ã–π–¢–∏–ø–¢–°': –ª—é–±–∏–º—ã–π_—Ç–∏–ø_—Ç—Å,
        '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π–õ—é–±–∏–º—ã–π–¢–°': –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π_–ª—é–±–∏–º—ã–π_—Ç—Å,
        '–õ—é–±–∏–º—ã–π–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞': –ª—é–±–∏–º—ã–π_—Å—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞
    }])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        '–ó–∞–∫–∞–∑—á–∏–∫': –∑–∞–∫–∞–∑—á–∏–∫,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤,
        '–¶–µ–Ω–∞–ó–∞–ß–∞—Å': —Ü–µ–Ω–∞_–∑–∞_—á–∞—Å,
        '–¢–∏–ø–ó–∞–∫–∞–∑–∞': —Ç–∏–ø_–∑–∞–∫–∞–∑–∞,
        '–õ—é–±–∏–º—ã–π–¢–∏–ø–¢–°': –ª—é–±–∏–º—ã–π_—Ç–∏–ø_—Ç—Å,
        '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π–õ—é–±–∏–º—ã–π–¢–°': –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π_–ª—é–±–∏–º—ã–π_—Ç—Å,
        '–õ—é–±–∏–º—ã–π–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞': –ª—é–±–∏–º—ã–π_—Å—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞
    }
    
    if save_order_data(order_data):
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    pool = Pool(input_data,
                cat_features=['–ó–∞–∫–∞–∑—á–∏–∫', '–¢–∏–ø–ó–∞–∫–∞–∑–∞', '–õ—é–±–∏–º—ã–π–¢–∏–ø–¢–°', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π–õ—é–±–∏–º—ã–π–¢–°', '–õ—é–±–∏–º—ã–π–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞'])
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    probs = model.predict_proba(pool)[0]
    top_indices = probs.argsort()[-10:][::-1]  # –ë–µ—Ä–µ–º —Ç–æ–ø-10, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
    
    # –î–∏–∞–ø–∞–∑–æ–Ω—ã –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def define_range(passengers):
        if passengers <= 4:
            return (1, 4)
        elif passengers <= 8:
            return (5, 8)
        elif passengers <= 20:
            return (9, 20)
        elif passengers <= 50:
            return (21, 50)
        else:
            return (51, 100)
    
    min_capacity, max_capacity = define_range(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤)
    
    recommendations = []
    
    for idx in top_indices:
        ref = model.classes_[idx]
        probability = probs[idx]
        capacity = type_ts_mapping.get(ref, 999)
        
        if min_capacity <= capacity <= max_capacity:
            recommendations.append((ref, probability, capacity))
        
        if len(recommendations) == 3:
            break
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    historical_matches = orders_df[
        (orders_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤'] >= min_capacity) & 
        (orders_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤'] <= max_capacity)
    ]
    
    if not historical_matches.empty:
        top_historical = historical_matches['–¢–∏–ø–¢–°'].value_counts().head(3).index.tolist()
        for ref in top_historical:
            if all(r[0] != ref for r in recommendations):
                capacity = type_ts_mapping.get(ref, 999)
                recommendations.append((ref, 0.0, capacity))
                if len(recommendations) == 3:
                    break
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("---")
    st.subheader("üöç –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¢–°")
    
    if recommendations:
        for i, (ref, probability, capacity) in enumerate(recommendations, 1):
            with st.expander(f"{i}. {ref} (–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {int(capacity)} –º–µ—Å—Ç)"):
                st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", f"{probability:.2%}")
                st.metric("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", f"{int(capacity)} –º–µ—Å—Ç")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                historical_usage = orders_df[orders_df['–¢–∏–ø–¢–°'] == ref]
                if not historical_usage.empty:
                    st.markdown("#### üìä –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", len(historical_usage))
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", 
                                 f"{historical_usage['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤'].mean():.1f}")
                    with col2:
                        st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞", 
                                 f"{historical_usage['–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è–°—Ç–æ–∏–º–æ—Å—Ç—å'].mean():,.0f} —Ä—É–±.")
                        st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å", 
                                 f"{historical_usage['–¶–µ–Ω–∞–ó–∞–ß–∞—Å'].mean():,.0f} —Ä—É–±.")
    else:
        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.")
